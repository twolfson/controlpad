#!/usr/bin/env node
// DEV: I am building this as close to bash as possible since it should eventually be pure bash

// Get info from linux displays
// http://www.cyberciti.biz/faq/how-do-i-find-out-screen-resolution-of-my-linux-desktop/
// xrandr | grep '*'

// Get nth column
// http://stackoverflow.com/questions/7315587/bash-shortest-way-to-get-n-th-column-of-output
// cut -f2
// DEV: Need to do `-d " "` for spaces o_O

// Load in modules
var assert = require('assert'),
    execSync = require('execSync'),
    exec = function (cmd) {
      return execSync.stdout(cmd).trim();
    };

function showHelp() {
  console.log('controlpad - WindowPad functionality for Linux');
  console.log('Usage: controlpad {{display}} {{size}}');
  console.log('    display - Display to move window to');
  console.log('        - leftmost, rightmost, topmost, bottommost - Absolute displays');
  // console.log('        - left, right, top, bottom - Relative to current display');
  console.log('        - current - Keep window on same display');
  console.log('    size - Size to adjust window to');
  console.log('        - left-half, right-half, top-half, bottom-half - Half displays');
  console.log('        - top-left-quarter, top-right-quarter, bottom-left-quarter, bottom-right-quarter - Quarter displays');
  console.log('        - top-left-eighth, top-right-eighth, bottom-left-eighth, bottom-right-eighth - Eighth displays');
  console.log('        - full - Take up entire screen (not maximized)');
  console.log('        - center - Center window in display (sized to half-by-half)');
  // console.log('        - scale - Scale window size relative to display');
}

// TODO: Move everything into a class and constructor
/*
var window = new Controlpad(), // defaults to active window via class method
    displays = Controlpad.getDisplays(),
    windowId = window.id;

window.resizeTo({top, left, width, height});
*/

// Grab display sizings/offsets
var displays = require('../lib/getDisplays')();

// Get active window and window info
// http://unix.stackexchange.com/questions/61037/how-to-resize-application-windows-in-an-arbitrary-direction-not-vertical-and-no
var windowId = exec("xprop -display '" + process.env.DISPLAY + "' -root | grep ^_NET_ACTIVE_WINDOW | cut --delimiter ' ' --fields 5"),
    windowInfo = require('../lib/windowInfo')(windowId);

// TODO: Deal with relative =_= -- fuck it. mark it as an issue.
var semanticDisplays = require('../lib/semanticDisplays')(displays);
semanticDisplays.current = require('../lib/getWindowDisplay')(windowInfo, displays);

// Find the requested display
var displayName = process.argv[2],
    display = semanticDisplays[displayName];

// Assert we have a valid display
if (!displayName) {
  console.error('You must specify a "display"');
} else if (!display) {
  console.error('"' + displayName + '" is not a valid display');
}

if (!display) {
  showHelp();
  process.exit(1);
}

// Grab the requested size
var sizeName = process.argv[3],
    semanticSizes = require('../lib/getSizes')(display),
    size = semanticSizes[sizeName];

// Assert we have a valid size
if (!sizeName) {
  console.error('You must specify a "size"');
} else if (!size) {
  console.error('"' + sizeName + '" is not a valid size');
}

if (!size) {
  showHelp();
  process.exit(1);
}

// Resize our active window to the display/size
// DEV: We cannot use title sniffing here since 'Terminal's have the same title =(
require('../lib/resizeWindowTo')(':ACTIVE:', size);

// TODO: Calculate relative displays (left, right, top, bottom) display

// TODO: Get current state stack

// TODO: For full and halfs, allow usage of maximize_horz/vert
