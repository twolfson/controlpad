#!/usr/bin/env node
// DEV: I am building this as close to bash as possiblesince it should eventually be pure bash

// Get info from linux displays
// http://www.cyberciti.biz/faq/how-do-i-find-out-screen-resolution-of-my-linux-desktop/
// xrandr | grep '*'

// Get nth column
// http://stackoverflow.com/questions/7315587/bash-shortest-way-to-get-n-th-column-of-output
// cut -f2
// DEV: Need to do `-d " "` for spaces o_O

// Load in execSync
var execSync = require('execSync'),
    exec = function (cmd) {
      return execSync.stdout(cmd).trim();
    };

// Grab display sizings/offsets
// DISPLAYS_STR=$(xrandr | grep ' connected ' | cut --fields=3 --delimiter ' ')
var displaysStr = exec("xrandr | grep ' connected ' | cut --fields=3 --delimiter ' '"),
    displaysArr = displaysStr.split(/\n/g),
    displays = displaysArr.map(function interpretdisplay (displayStr) {
      // DEV: This is a bash-like implementation -- normally, we would use .match(/.../g), or `extract-values` module
      var displayDimensions = displayStr.replace(/x/g, ' ').replace(/\+/g, ' ').split(' ');
      return {
        width: +displayDimensions[0],
        height: +displayDimensions[1],
        left: +displayDimensions[2],
        top: +displayDimensions[3]
      };
    });

// TODO: This will become wmpush eventually
function resizeActiveTo(dimensions) {
  // gravity, left, top, width, height
  exec("wmctrl -r :ACTIVE: -e 0," + dimensions.left + "," + dimensions.top + "," + dimensions.width + "," + dimensions.height);
}

// DEV: Resize active window to right half of first display
// var firstDisplay = displays[0];
// resizeActiveTo({
//   width: firstDisplay.width / 2,
//   height: firstDisplay.height,
//   left: firstDisplay.left + firstDisplay.width / 2,
//   top: firstDisplay.top
// });

// TODO: Next step -- get single commands working (not worrying about chaining stack)
// e.g. controlpad rightmost right-half

// Calculate the rightmost/leftmost/topmost/bottommost displays
var semanticDisplays = {
      leftmost: displays.reduce(function (a, b) {
        if (a.left <= b.left) { return a; }
        return b;
      }),
      rightmost: displays.reduce(function (a, b) {
        if (a.left >= b.left) { return a;}
        return b;
      }),
      topmost: displays.reduce(function (a, b) {
        if (a.top <= b.top) { return a; }
        return b;
      }),
      bottommost: displays.reduce(function (a, b) {
        if (a.top >= b.top) { return a; }
        return b;
      })
      // TODO: Deal with current and relative =_=
    };
console.log(semanticDisplays);


// // DEV: Temporary stand in
// function grep(content, pattern) {
//   var lines = content.split(/\n/g),
//       matchedLines = lines.filter(function (line) {
//         return line.match(pattern);
//       }) || [];
//   return matchedLines[0];
// }

// // TODO: Get current window and its position (if not exclusively on a display, use the top/left corner as the de-facto -- we could use other metrics like % of window on display but that overcomplicates things and is not practical)
// // Get active window and window info
// // http://unix.stackexchange.com/questions/61037/how-to-resize-application-windows-in-an-arbitrary-direction-not-vertical-and-no
// var windowId = exec("xprop -display ':0' -root | grep ^_NET_ACTIVE_WINDOW | cut --delimiter ' ' --fields 5"),
//     windowWidth = exec("xwininfo -id " + windowId + " | grep Width | cut --delimiter ' ' --fields 4"),
//     windowHeight = exec("xwininfo -id " + windowId + " | grep Height | cut --delimiter ' ' --fields 4"),
//     windowLeft = exec("xwininfo -id " + windowId + " | grep 'Absolute upper-left X' | cut --delimiter ' ' --fields 7");
//     windowTop = exec("xwininfo -id " + windowId + " | grep 'Absolute upper-left Y' | cut --delimiter ' ' --fields 7");

// // TODO: Calculate relative displays (left, right, top, bottom) display

// // TODO: Calculate current display

// TODO: Allow for same size (this allows for swapping displays)

// // TODO: Get current state stack