#!/usr/bin/env node
// DEV: I am building this as close to bash as possiblesince it should eventually be pure bash

// Get info from linux displays
// http://www.cyberciti.biz/faq/how-do-i-find-out-screen-resolution-of-my-linux-desktop/
// xrandr | grep '*'

// Get nth column
// http://stackoverflow.com/questions/7315587/bash-shortest-way-to-get-n-th-column-of-output
// cut -f2
// DEV: Need to do `-d " "` for spaces o_O

// Load in execSync
var execSync = require('execSync'),
    exec = function (cmd) {
      return execSync.stdout(cmd).trim();
    };

// Grab desktop sizings/offsets
// DESKTOPS_STR=$(xrandr | grep ' connected ' | cut --fields=3 --delimiter ' ')
var desktopsStr = exec("xrandr | grep ' connected ' | cut --fields=3 --delimiter ' '"),
    desktopsArr = desktopsStr.split(/\n/g),
    desktops = desktopsArr.map(function interpretDesktop (desktopStr) {
      // DEV: This is a bash-like implementation -- normally, we would use .match(/.../g), or `extract-values` module
      var desktopDimensions = desktopStr.replace(/x/g, ' ').replace(/\+/g, ' ').split(' ');
      return {
        width: desktopDimensions[0],
        height: desktopDimensions[1],
        left: desktopDimensions[2],
        top: desktopDimensions[3]
      };
    });

// TODO: Step 1 -- Get it working
// TODO: Resize active window to right half of rightmost desktop

// // DEV: Temporary stand in
// function grep(content, pattern) {
//   var lines = content.split(/\n/g),
//       matchedLines = lines.filter(function (line) {
//         return line.match(pattern);
//       }) || [];
//   return matchedLines[0];
// }

// // TODO: Get current window and its position
// // Get active window and window info
// // http://unix.stackexchange.com/questions/61037/how-to-resize-application-windows-in-an-arbitrary-direction-not-vertical-and-no
// var windowId = exec("xprop -display ':0' -root | grep ^_NET_ACTIVE_WINDOW | cut --delimiter ' ' --fields 5"),
//     windowWidth = exec("xwininfo -id " + windowId + " | grep Width | cut --delimiter ' ' --fields 4"),
//     windowHeight = exec("xwininfo -id " + windowId + " | grep Height | cut --delimiter ' ' --fields 4"),
//     windowLeft = exec("xwininfo -id " + windowId + " | grep 'Absolute upper-left X' | cut --delimiter ' ' --fields 7");
//     windowTop = exec("xwininfo -id " + windowId + " | grep 'Absolute upper-left Y' | cut --delimiter ' ' --fields 7");

// // TODO: Calculate the rightmost/leftmost/topmost/bottommost desktops

// // TODO: Calculate relative desktops (left, right, top, bottom) desktop

// // TODO: Calculate current desktop

// // TODO: Get current state stack